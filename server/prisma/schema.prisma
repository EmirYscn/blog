// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id     String  @id @default(uuid())
  bio    String?
  
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String  @unique
}

model User {
  id       String    @id @default(uuid())
  email    String    @unique
  username String?
  password String?
  role     ROLE      @default(USER)
  avatar   String? // Direct URL to avatar image

  posts    Post[]
  profile  Profile?
  comments Comment[]
  media    Media[] // For other media uploaded by the user
  likes    Like[]
}

model Post {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete timestamp
  title     String    @db.VarChar(255)
  content   String?
  published Boolean   @default(false)
  featured  Boolean   @default(false)

  author    User      @relation(fields: [authorId], references: [id])
  authorId  String

  comments  Comment[]
  tags      String[]
  media     Media[]
  likes     Like[]
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String

  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")

  likes     Like[]
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?

  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model Media {
  id        String   @id @default(uuid())
  url       String
  type      String // 'image', 'video', etc.
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?
  
}

model Subscriber {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

enum ROLE {
  ADMIN
  USER
  AUTHOR
}
